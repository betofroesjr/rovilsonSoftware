package br.edu.ufu.doutorado.pca.view;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import br.edu.ufu.doutorado.pca.execucao.Core;
import br.edu.ufu.doutorado.pca.modelo.Grupo;
import br.edu.ufu.doutorado.pca.modelo.Mensagem;
import br.edu.ufu.doutorado.pca.modelo.Palavra;
import br.edu.ufu.doutorado.pca.modelo.Pictograma;
import br.edu.ufu.doutorado.pca.view.fxml.ISceneAcionador;
import br.edu.ufu.doutorado.pca.view.fxml.PictogramaGrupo;
import br.edu.ufu.doutorado.pca.view.fxml.PictogramaImagem;

public class Principal extends VBox implements Initializable, ISceneAcionador {

	@FXML
	protected HBox hbGrupo;
	@FXML
	protected Label lbPalavraAtual;
	@FXML
	protected Label lbPesquisar;
	@FXML
	protected Label lbBack;
	@FXML
	protected HBox hbAtual;
	@FXML
	protected HBox hbSugestoes;
	
	private Mensagem mensagemAtual;
	
	private List<String> palavras;
	
	private Core core;

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		core = new Core();
		try {
			core.init();
		} catch (Exception e) {
			e.printStackTrace();
		}
		palavras = Palavra.palavras(SimuladorView.TAMANHO_PALAVRA);
		hbGrupo.setSpacing(10);
		hbSugestoes.setSpacing(10);
		lbPalavraAtual.setText("");
		for (Grupo grupo : Grupo.values()) {
			PictogramaGrupo hbPicGrupo = new PictogramaGrupo(grupo);
			hbPicGrupo.setPalavra(palavras.get(0));
			palavras.remove(0);
			hbGrupo.getChildren().add(hbPicGrupo);
		}
		
		((PictogramaGrupo)hbGrupo.getChildren().get(0)).selecionar(true);
		
		lbPesquisar.setText(palavras.get(0));
		palavras.remove(0);
		lbBack.setText(palavras.get(0));
		palavras.remove(0);
		
		this.mensagemAtual = new Mensagem();
		
		int limitePictograma = palavras.size();
		
		// CARREGAR LISTA DE PICTOGRAMAS INICIAL
		List<Pictograma> sugestaoInicial = core.listaSugestao(mensagemAtual, getGrupoSelecionado(), limitePictograma);
		carregarSugestao(sugestaoInicial);
	}
	
	private void carregarSugestao(List<Pictograma> pictogramas) {
		hbSugestoes.getChildren().clear();
		for (int i = 0; i < pictogramas.size(); i++) {
			Pictograma pictograma = pictogramas.get(i);
			PictogramaImagem hbPicImagem = new PictogramaImagem(pictograma);
			hbPicImagem.setPalavra(palavras.get(i));
			
			hbSugestoes.getChildren().add(hbPicImagem);
		}
	}
	
	private Grupo getGrupoSelecionado() {
		for (Node node : hbGrupo.getChildren()) {
			PictogramaGrupo hb = (PictogramaGrupo) node;
			if (hb.getSelecionado()) {
				return hb.getGrupo();
			}
		}
		return null;
	}
	
	public void processarCancelar() {
		lbPalavraAtual.setText("");
	}
	
	private void removerSelecaoGrupo() {
		for (Node node : hbGrupo.getChildren()) {
			PictogramaGrupo hb = (PictogramaGrupo) node;
			hb.selecionar(false);
		}
	}
	
	private void processarGrupo(PictogramaGrupo hb) {		
		selecionarGrupo(hb.getGrupo());
		carregarSugestao(core.listaSugestao(mensagemAtual, getGrupoSelecionado(), palavras.size()));
	}
	
	private void selecionarGrupo(Grupo grupo) {
		removerSelecaoGrupo();
		for (Node node : hbGrupo.getChildren()) {
			PictogramaGrupo hb = (PictogramaGrupo) node;
			if (hb.getGrupo().equals(grupo)) {
				hb.selecionar(true);
				return;
			}
		}
		
	}
	
	private void processarPictograma(PictogramaImagem hb) {
		this.mensagemAtual.getPictogramas().add(hb.getPictograma());
		Grupo grupo = core.sugerirGrupo(this.mensagemAtual);
		if (! grupo.equals(this.getGrupoSelecionado())) {
			selecionarGrupo(grupo);
			carregarSugestao(core.listaSugestao(mensagemAtual, getGrupoSelecionado(), palavras.size()));
		}
				
		atualizarMensagemAtual();
	}
	
	private void atualizarMensagemAtual() {
		hbAtual.getChildren().clear();
		for (Pictograma pic : this.mensagemAtual.getPictogramas()) {
			hbAtual.getChildren().add(new PictogramaImagem(pic));
		}
	}
	
	private void processarBackspace() {
		int i = this.mensagemAtual.getPictogramas().size();
		if (i > 0) {
			this.mensagemAtual.getPictogramas().remove(i - 1);
		}
		atualizarMensagemAtual();
	}
	
	public void processarPalavra(String comando) {

		if (comando.equals(lbPesquisar.getText())) {
			processarPesquisar();
		} else if (comando.equals(lbBack.getText())) {
			processarBackspace();
		} else {
			// pesquisar grupo
			for (Node node : hbGrupo.getChildren()) {
				PictogramaGrupo hb = (PictogramaGrupo) node;
				if (hb.getPalavra().equals(comando)) {
					processarGrupo(hb);
					return;
				}
			}
			// pesquisar sugestao
			for (Node node : hbSugestoes.getChildren()) {
				PictogramaImagem hb = (PictogramaImagem) node;
				if (hb.getPalavra().equals(comando)) {
					processarPictograma(hb);
					return;
				}
			}
		}
		
		
		lbPalavraAtual.setText("");
	}
	
	private void processarPesquisar() {
		SimuladorView.carregarPesquisa();
	}
	
	public void processarCaractere(String comando) {
		lbPalavraAtual.setText(comando);
	}
	
}
