package br.edu.ufu.doutorado.pca.servico.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mrunit.mapreduce.MapDriver;
import org.apache.hadoop.mrunit.mapreduce.MapReduceDriver;
import org.apache.hadoop.mrunit.mapreduce.ReduceDriver;
import org.apache.hadoop.mrunit.types.Pair;

import br.edu.ufu.doutorado.pca.modelo.Grupo;
import br.edu.ufu.doutorado.pca.modelo.Matriz;
import br.edu.ufu.doutorado.pca.modelo.MatrizGrupo;
import br.edu.ufu.doutorado.pca.modelo.Mensagem;
import br.edu.ufu.doutorado.pca.modelo.Pictograma;
import br.edu.ufu.doutorado.pca.servico.impl.hadoop.MyMapper1;
import br.edu.ufu.doutorado.pca.servico.impl.hadoop.MyReducer1;
import br.edu.ufu.doutorado.pca.servico.interfaces.IPreditor;
import br.edu.ufu.doutorado.pca.servico.interfaces.ITecladoVirtual;
import br.edu.ufu.doutorado.pca.util.GenericComparator;
import br.edu.ufu.doutorado.pca.util.SortType;

public class Hadoop extends Preditor {

	protected List<Matriz> matriz;
	
	protected List<MatrizGrupo> matrizGrupo;
	
	private IPreditor frequencia;
	
	private List<Pair<Text, Text>> output;
	private MapDriver<Object, Text, Text, Text>mapDriver;
	private ReduceDriver<Text, Text, Text, Text> reduceDriver;
	private MapReduceDriver<Object, Text, Text, Text, Text, Text> mapReduceDriver;
	
	
	public Hadoop(ITecladoVirtual teclado) {
		super(teclado);
		this.frequencia = new Frequencia(teclado);
		this.matriz = new ArrayList<Matriz>();
		this.matrizGrupo = new ArrayList<MatrizGrupo>();
		
		MyMapper1 mapper = new MyMapper1();
		mapDriver = new MapDriver<Object, Text, Text, Text>();
		mapDriver.setMapper(mapper);
		
		MyReducer1 reducer = new MyReducer1();
		reduceDriver = new ReduceDriver<Text, Text, Text, Text>();
		reduceDriver.setReducer(reducer);
		
		mapReduceDriver = new MapReduceDriver<Object, Text, Text, Text, Text, Text>();
		mapReduceDriver.setMapper(mapper);
		mapReduceDriver.setReducer(reducer);
	}
	
	@Override
	public void treinar(List<Mensagem> mensagens) {
		
		for (Mensagem mensagem : mensagens) {
			for (int i = 1; i < mensagem.getPictogramas().size(); i++) {
				List<Pictograma> pictogramas = new ArrayList<Pictograma>();
				List<Grupo> grupos = new ArrayList<Grupo>();
				for (int j = i - 1; j < i; j++) {
					pictogramas.add(mensagem.getPictogramas().get(j));
					grupos.add(mensagem.getPictogramas().get(j).getGrupo());
				}
				Matriz item = new Matriz();
				item.setNgram(pictogramas);
				item.setVizinhanca(mensagem.getPictogramas().get(i));
				item.setPeso(1);
				
				int idx = matriz.indexOf(item); 
				if (idx >= 0) {
					matriz.get(idx).setPeso(matriz.get(idx).getPeso() + 1);
				} else {
					matriz.add(item);
				}
				
				MatrizGrupo itemGrupo = new MatrizGrupo();
				itemGrupo.setNgram(grupos);
				itemGrupo.setVizinhanca(mensagem.getPictogramas().get(i).getGrupo());
				itemGrupo.setPeso(1);
				
				idx = matrizGrupo.indexOf(itemGrupo); 
				if (idx >= 0) {
					matrizGrupo.get(idx).setPeso(matrizGrupo.get(idx).getPeso() + 1);
				} else {
					matrizGrupo.add(itemGrupo);
				}
			}
		}
		
		mapReduceDriver.withInput(new Pair<Object, Text> ("1", new Text(matrizToText(matriz))));
 					
		try {
			output = mapReduceDriver.run();
			for (Pair<Text, Text> p : output) 
			{
				System.out.println(p.getFirst() + "->" + p.getSecond());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		
	}
	
	private String matrizToText(List<Matriz> matriz) {
		StringBuilder str = new StringBuilder();
		for (Matriz m : matriz) {
			str.append(m.getNgram().get(0).getRotulo() + "\t" + m.getPeso() + "~" + m.getVizinhanca().getRotulo() + " \n");
		}
		return str.toString();
	}

	@Override
	public void iniciarNovaSugestao() {
		
	}

	@Override
	public Grupo sugerirGrupo(Mensagem mensagemAtual) {
		Grupo grupo = this.frequencia.sugerirGrupo(mensagemAtual);
		
		if (mensagemAtual.getPictogramas().size() >= 1) {
			List<Grupo> grupos = new ArrayList<Grupo>();
			for (int i = 0; i < 1; i++) {
				int idx = mensagemAtual.getPictogramas().size() - 1 + i;
				grupos.add(mensagemAtual.getPictogramas().get(idx).getGrupo());
			}
			List<MatrizGrupo> sugestao = MatrizGrupo.filtrar(this.matrizGrupo, grupos);
			if (sugestao.size() > 0) {
				GenericComparator.sortList(sugestao, "peso", SortType.DESC);
				return sugestao.get(0).getVizinhanca();
			}
		}
		
		return grupo;
	}
	
	private List<Pictograma> obterPalavras(String rotulo, Grupo grupo) {
		List<Pictograma> sugestao = new ArrayList<Pictograma>();
		for (Pair<Text, Text> p : output) {
			if (rotulo.equals(p.getFirst().toString().trim())) {
				String[] second = p.getSecond().toString().split(" ,");
				for (String str : second) {
					Pictograma pic = Pictograma.buscar(str.trim(), Pictograma.getDicionario());
					if (pic.getGrupo().equals(grupo)) {
						sugestao.add(pic);
					}
				}
			}
		}
		return sugestao;
	}

	@Override
	public List<Pictograma> sugerir(Mensagem mensagemAtual, String busca, Grupo grupoSelecionado, Integer limite) {
		// SE A MENSAGEM ATUAL POSSUI O TAMANHO MÍNIMO
		if (mensagemAtual.getPictogramas().size() >= 1) {
			List<Pictograma> ngram = new ArrayList<Pictograma>();

			for (int i = 0; i < 1; i++) {
				int idx = mensagemAtual.getPictogramas().size() - 1 + i;
				ngram.add(mensagemAtual.getPictogramas().get(idx));
			}
			
			List<Pictograma> sugestao = obterPalavras(ngram.get(0).getRotulo(), grupoSelecionado);

			if (! busca.equals("")) {
				sugestao = this.getTeclado().filtrarPictogramas(busca, sugestao);
			}

			if (sugestao.size() >= limite) {
				sugestao = sugestao.subList(0, limite);
			}

			return sugestao;
		} else {
			return this.frequencia.sugerir(mensagemAtual, busca, grupoSelecionado, limite);
		}
	}

	
	

}
